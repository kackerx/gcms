// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gcms/internal/conf"
	"gcms/internal/data"
	"gcms/internal/domain"
	"gcms/internal/handler"
	"gcms/internal/middleware"
	"gcms/internal/server"
	"gcms/internal/service"
	"gcms/pkg/log"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func wireApp(confData *conf.Data, confJwt *conf.JWT, logger *log.Logger) (*gin.Engine, func(), error) {
	jwt := middleware.NewJwt(confJwt)
	handlerHandler := handler.NewHandler(logger)
	redisCache := data.NewCache(confData)
	serviceService := service.NewService(jwt, redisCache, logger)
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	userDomainService := domain.NewUserDomainService(userRepo)
	userService := service.NewUserService(serviceService, userDomainService)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	engine := server.NewHTTPServer(logger, jwt, userHandler)
	return engine, func() {
		cleanup()
	}, nil
}

// wire.go:

var domainSet = wire.NewSet(domain.NewUserDomainService)

var dataSet = wire.NewSet(data.NewData, data.NewUserRepo, data.NewCache)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler)

var serverSet = wire.NewSet(server.NewHTTPServer)

var jwtSet = wire.NewSet(middleware.NewJwt)

var logSet = wire.NewSet(log.NewLog)
